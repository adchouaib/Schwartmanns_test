// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Circle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SheetId")
                        .HasColumnType("uuid");

                    b.Property<double>("xPosition")
                        .HasColumnType("double precision");

                    b.Property<double>("yPosition")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SheetId");

                    b.ToTable("Circles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00c6a184-47f2-4b75-947c-415ee97445cf"),
                            Radius = 10.0,
                            SheetId = new Guid("448d661f-f1ea-47d8-9080-ef060a5f5bcd"),
                            xPosition = 0.0,
                            yPosition = 1.0
                        },
                        new
                        {
                            Id = new Guid("0131f75d-b99c-4f88-8219-b7deed04b118"),
                            Radius = 20.0,
                            SheetId = new Guid("448d661f-f1ea-47d8-9080-ef060a5f5bcd"),
                            xPosition = 12.0,
                            yPosition = 1.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb67c695-d666-4a5e-81b8-fd486d44672b"),
                            Address = "Rabat Technopolis",
                            Name = "Capgemini",
                            Phone = "0666666666"
                        },
                        new
                        {
                            Id = new Guid("84e8668b-7a49-4283-96aa-73b871f6e679"),
                            Address = "Rabat Technopolis",
                            Name = "novec",
                            Phone = "0666666666"
                        },
                        new
                        {
                            Id = new Guid("dce52084-ed68-4f9e-85f6-fdf5e20a45ad"),
                            Address = "Rabat Souissi",
                            Name = "ALGO Consulting",
                            Phone = "0666666666"
                        },
                        new
                        {
                            Id = new Guid("76ca6169-5587-4204-be0e-f45f9cb0288d"),
                            Address = "Rabat Agdal",
                            Name = "intelcap",
                            Phone = "0666666666"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c42ef423-2dd0-4b12-a05c-36cebcbdc114"),
                            MaterialId = 2,
                            ProjectId = new Guid("d413951c-0a53-4531-adf5-a07838d7b966")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lines", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Bulge")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SheetId")
                        .HasColumnType("uuid");

                    b.Property<double>("xPosition")
                        .HasColumnType("double precision");

                    b.Property<double>("yPosition")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SheetId");

                    b.ToTable("PolyLines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fbf3f83-42d3-40f8-888d-cc5480b4933c"),
                            Bulge = 10.0,
                            SheetId = new Guid("448d661f-f1ea-47d8-9080-ef060a5f5bcd"),
                            xPosition = 10.0,
                            yPosition = 10.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d413951c-0a53-4531-adf5-a07838d7b966"),
                            ClientId = new Guid("eb67c695-d666-4a5e-81b8-fd486d44672b"),
                            FileName = "cap.pdf",
                            FilePath = "capProjects/cap.pdf",
                            Name = "Création d'un dashboard",
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb"
                        },
                        new
                        {
                            Id = new Guid("1829a532-fcec-45a2-93b8-8bbb7a8eb9c0"),
                            ClientId = new Guid("eb67c695-d666-4a5e-81b8-fd486d44672b"),
                            FileName = "cap2.pdf",
                            FilePath = "capProjects/cap2.pdf",
                            Name = "migration d'une application vers .Net Core",
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb"
                        },
                        new
                        {
                            Id = new Guid("27f07d89-745b-441c-9cf1-d9559f5294ed"),
                            ClientId = new Guid("dce52084-ed68-4f9e-85f6-fdf5e20a45ad"),
                            FileName = "algo.pdf",
                            FilePath = "algoProjects/algo.pdf",
                            Name = "mise en place d'une architecture microservice",
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb"
                        },
                        new
                        {
                            Id = new Guid("c470b265-87c9-4447-a817-8269f052bc6c"),
                            ClientId = new Guid("84e8668b-7a49-4283-96aa-73b871f6e679"),
                            FileName = "novec.pdf",
                            FilePath = "novecProjects/novec.pdf",
                            Name = "migration vers dotnet core",
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Sheets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("448d661f-f1ea-47d8-9080-ef060a5f5bcd"),
                            JobId = new Guid("c42ef423-2dd0-4b12-a05c-36cebcbdc114"),
                            Length = 10.0,
                            Width = 10.0
                        },
                        new
                        {
                            Id = new Guid("47e5baa6-ac3d-4c5b-be21-4b1d3c32c7bd"),
                            JobId = new Guid("c42ef423-2dd0-4b12-a05c-36cebcbdc114"),
                            Length = 12.0,
                            Width = 12.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e8356cb-a0fd-4859-b483-9e0fd7489afb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4235646d-f8e0-43d3-bbce-1853194ff6f6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHmWJA8DxCBUOdgk0W2v3AIp7CO671Fof1VP4ZVFBS6lXVprVMhXrnvCxN27yy0BXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab1b9f29-082b-44e0-a332-4e2b45346639",
                            TwoFactorEnabled = false,
                            Type = 0,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Circle", b =>
                {
                    b.HasOne("Domain.Entities.Sheet", "Sheet")
                        .WithMany("Circles")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Lines", b =>
                {
                    b.HasOne("Domain.Entities.Sheet", "Sheet")
                        .WithMany("PolyLines")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Sheet", b =>
                {
                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("Sheets")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Sheet", b =>
                {
                    b.Navigation("Circles");

                    b.Navigation("PolyLines");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
